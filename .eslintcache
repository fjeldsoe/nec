[{"/Users/afc/Frontend/Projects/nec/src/index.js":"1","/Users/afc/Frontend/Projects/nec/src/serviceWorker.js":"2","/Users/afc/Frontend/Projects/nec/src/App.js":"3","/Users/afc/Frontend/Projects/nec/src/Gallery.js":"4","/Users/afc/Frontend/Projects/nec/src/ImageDetails.js":"5","/Users/afc/Frontend/Projects/nec/src/Image.js":"6","/Users/afc/Frontend/Projects/nec/src/breakpoints.js":"7"},{"size":430,"mtime":1555088654986,"results":"8","hashOfConfig":"9"},{"size":4951,"mtime":1555088654987,"results":"10","hashOfConfig":"9"},{"size":10641,"mtime":1607639980988,"results":"11","hashOfConfig":"9"},{"size":4726,"mtime":1607639989602,"results":"12","hashOfConfig":"9"},{"size":7484,"mtime":1607702615877,"results":"13","hashOfConfig":"9"},{"size":801,"mtime":1603630643043,"results":"14","hashOfConfig":"9"},{"size":436,"mtime":1594128252764,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1rokd84",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/afc/Frontend/Projects/nec/src/index.js",[],["34","35"],"/Users/afc/Frontend/Projects/nec/src/serviceWorker.js",[],"/Users/afc/Frontend/Projects/nec/src/App.js",["36","37"],"import React, { useState, useEffect, createContext } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from 'react-router-dom';\nimport styled from 'styled-components/macro';\nimport { v4 as uuidv4 } from 'uuid';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport 'firebase/firestore';\nimport 'firebase/analytics';\nimport Gallery from './Gallery';\nimport ImageDetails from './ImageDetails';\nimport arrayMove from 'array-move';\n\nconst LoggedInBar = styled.div`\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    background: #333;\n`;\n\nconst LoginForm = styled.form`\n    width: 100%;\n    max-width: 500px;\n    padding: 20px;\n    margin: 0 auto;\n`;\n\nconst FormInput = styled.input`\n    display: block;\n    width: 100%;\n    height: 40px;\n    padding: 10px;\n    margin-bottom: 10px;\n    border: 1px solid #999;\n    background: #fff;\n`;\n\nconst LoginButton = styled.button`\n    width: 100%;\n    height: 40px;\n`;\n\nconst StyledLink = styled(Link)`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n    margin-top: 20px;\n    color: #fff;\n`;\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyBPG6_rLNCqJKQaQxRxoL9kiNRrst_SGng',\n    authDomain: 'necgallery-9b4b2.firebaseapp.com',\n    databaseURL: 'https://necgallery-9b4b2.firebaseio.com',\n    projectId: 'necgallery-9b4b2',\n    storageBucket: 'necgallery-9b4b2.appspot.com',\n    messagingSenderId: '534201773677',\n    appId: '1:534201773677:web:57fa8d6f25817e60155964',\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nconst db = firebase.firestore();\nconst galleryCollection = db.collection('gallery');\nconst storage = firebase.storage();\nconst storageRef = storage.ref();\n\nexport const AppContext = createContext();\n\nfunction upload(images, setUploadProgress) {\n    return Promise.all(\n        images.map((image) => {\n            return new Promise((resolve, reject) => {\n                const id = uuidv4();\n\n                const imageRef = storageRef.child(`gallery/${id}/original.jpg`);\n                const uploadTask = imageRef.put(image);\n                uploadTask.on('state_changed', function uploadProgress(snapshot) {\n                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                    setUploadProgress(progress);\n                });\n                uploadTask\n                    .then((snapshot) => {\n                        resolve({ ...snapshot, id });\n                    })\n                    .catch((err) => {\n                        reject(new Error(err.message_));\n                    });\n            });\n        })\n    ).catch((err) => {\n        alert(err);\n    });\n}\n\nfunction onDragoverHandler(event) {\n    event.preventDefault();\n}\n\nfunction deleteDocRef(id) {\n    return galleryCollection.doc(id).delete();\n}\n\nfunction deleteImageRef(path) {\n    return storageRef.child(path).delete();\n}\n\nfunction App() {\n    const [images, setImages] = useState([]);\n    const [user, setUser] = useState(false);\n    const [uploadProgress, setUploadProgress] = useState(0);\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    function onDropHandler(event) {\n        event.preventDefault();\n\n        const {\n            dataTransfer: { files = {} },\n        } = event;\n\n        const images = Object.values(files).reduce((acc, file) => {\n            return file.type.includes('image') ? [...acc, file] : acc;\n        }, []);\n\n        upload(images, setUploadProgress);\n    }\n\n    function shouldCancelStart() {\n        return user !== false ? false : true;\n    }\n\n    function handleSortEnd({ oldIndex, newIndex }) {\n        setImages((imagesArray) => arrayMove(imagesArray, oldIndex, newIndex));\n    }\n\n    function getImagesFromDb() {\n        galleryCollection\n            .orderBy('order')\n            .get()\n            .then((querySnapshot) => {\n                setImages(imagesFromDBArray(querySnapshot));\n            });\n    }\n\n    function updateDescription({ id, description }) {\n        galleryCollection.doc(id).update({ description });\n        getImagesFromDb();\n    }\n\n    function removeImage(image) {\n        const sure = window.confirm('Er du sikker pÃ¥ du vil slette billedet?');\n\n        if (!sure) {\n            return;\n        }\n\n        const { id, downloadUrls } = image;\n        const keys = downloadUrls.map((obj) => {\n            const [key] = Object.keys(obj);\n            return key;\n        });\n        Promise.all([keys.map((key) => deleteImageRef(`gallery/${id}/${key}.jpg`)), deleteDocRef(id)])\n            .then(function () {\n                // File deleted successfully\n                console.log('successfully deleted images');\n                getImagesFromDb();\n            })\n            .catch(function (error) {\n                // Uh-oh, an error occurred!\n                console.log(error);\n            });\n    }\n\n    function signIn(event) {\n        event.preventDefault();\n\n        firebase\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .catch(function (error) {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n\n                alert(errorMessage);\n            });\n    }\n\n    async function signOut() {\n        await firebase.auth().signOut();\n        setUser(false);\n    }\n\n    // Check login status\n    useEffect(() => {\n        const unregisterAuthObserver = firebase.auth().onAuthStateChanged(function (user) {\n            if (user) {\n                setUser(user);\n            }\n        });\n\n        return () => {\n            unregisterAuthObserver();\n        };\n    }, []);\n\n    function imagesFromDBArray(querySnapshot) {\n        const imagesFromDb = [];\n\n        querySnapshot.forEach((doc) => {\n            const id = doc.id;\n            const data = doc.data();\n            imagesFromDb.push({ id, ...data });\n        });\n\n        return imagesFromDb;\n    }\n\n    useEffect(() => {\n        getImagesFromDb();\n\n        galleryCollection.onSnapshot((querySnapshot) => {\n            const fromDB = imagesFromDBArray(querySnapshot);\n\n            const maxSortOrder = Math.max(...fromDB.map(({ order }) => order));\n            const notOrdered = fromDB.find(({ order }) => order === -1);\n\n            if (notOrdered) {\n                setImages((imagesArray) => [...imagesArray, { ...notOrdered, order: maxSortOrder + 1 }]);\n            }\n        });\n\n        document.addEventListener('drop', onDropHandler);\n        document.addEventListener('dragover', onDragoverHandler);\n\n        return () => {\n            document.removeEventListener('drop', onDropHandler);\n            document.removeEventListener('dragover', onDragoverHandler);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (user) {\n            const batch = db.batch();\n            Object.entries(images).forEach(([key, val]) => {\n                const { id } = val;\n                const docRef = galleryCollection.doc(id);\n                batch.update(docRef, { order: parseInt(key) });\n            });\n            batch.commit().then(() => {\n                console.log('committed batch');\n            });\n        }\n    }, [user, images]);\n\n    return (\n        <AppContext.Provider value={{ user }}>\n            {user && (\n                <LoggedInBar>\n                    <span>Du er logget ind</span>\n                </LoggedInBar>\n            )}\n            <Router>\n                <Switch>\n                    <Route\n                        exact\n                        path=\"/\"\n                        render={(props) => (\n                            <Gallery\n                                {...props}\n                                images={images}\n                                user={user}\n                                signOut={signOut}\n                                uploadProgress={uploadProgress}\n                                handleSortEnd={handleSortEnd}\n                                shouldCancelStart={shouldCancelStart}\n                            ></Gallery>\n                        )}\n                    />\n                    <Route\n                        exact\n                        path=\"/image/:id\"\n                        render={(props) => {\n                            if (images.length) {\n                                const id = props.match.params.id;\n                                const image = images.find((image) => image.id === id);\n                                return image ? (\n                                    <ImageDetails\n                                        {...props}\n                                        image={image}\n                                        removeImage={removeImage}\n                                        updateDescription={updateDescription}\n                                        user={user}\n                                    />\n                                ) : (\n                                    <Redirect to=\"/\" />\n                                );\n                            }\n                        }}\n                    />\n                    <Route\n                        exact\n                        path=\"/login\"\n                        render={() =>\n                            user === false ? (\n                                <LoginForm onSubmit={signIn}>\n                                    <FormInput\n                                        type=\"text\"\n                                        placeholder=\"Email\"\n                                        value={email}\n                                        onChange={(event) => setEmail(event.target.value)}\n                                    />\n                                    <FormInput\n                                        type=\"password\"\n                                        placeholder=\"Password\"\n                                        value={password}\n                                        onChange={(event) => setPassword(event.target.value)}\n                                    />\n                                    <LoginButton>Log ind</LoginButton>\n                                    <StyledLink to=\"/\">Tilbage</StyledLink>\n                                </LoginForm>\n                            ) : (\n                                <Redirect to=\"/\" />\n                            )\n                        }\n                    />\n                    <Redirect to=\"/\" />\n                </Switch>\n            </Router>\n        </AppContext.Provider>\n    );\n}\n\nexport default App;\n","/Users/afc/Frontend/Projects/nec/src/Gallery.js",[],"/Users/afc/Frontend/Projects/nec/src/ImageDetails.js",["38","39","40"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport styled, { createGlobalStyle } from 'styled-components/macro';\r\nimport Image from './Image';\r\nimport { AppContext } from './App';\r\nimport { getLuminance, getContrast } from 'polished';\r\nimport tinygradient from 'tinygradient';\r\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport { stateToHTML } from 'draft-js-export-html';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    body {\r\n        &:before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            bottom: 0;\r\n            left: 0;\r\n            right: 0;\r\n            background-image: ${(props) => props.gradient};\r\n            filter: blur(100px);\r\n        }\r\n    }\r\n\r\n    .editorWrapper {\r\n        color: black;\r\n        margin-bottom: 5px;\r\n    }\r\n\r\n    .editorTextField {\r\n        height: auto;\r\n        padding: 10px;\r\n        background: white;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex: 1 1 auto;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n    position: fixed;\r\n    top: 10%;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: linear-gradient(0deg, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0.6) 100%);\r\n    box-shadow: 0 -10px 20px rgba(0, 0, 0, 0.5);\r\n    transform: translateY(${({ active }) => (active ? 0 : 'calc(100% - 60px)')});\r\n    transition: transform 300ms ease;\r\n`;\r\n\r\nconst OverlayNav = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 60px;\r\n`;\r\n\r\nconst Back = styled.button`\r\n    display: flex;\r\n    align-items: center;\r\n    height: inherit;\r\n    background: none;\r\n    border: 0;\r\n    padding: 0 0 0 20px;\r\n    color: inherit;\r\n    font-size: inherit;\r\n`;\r\n\r\nconst BackArrow = styled(ArrowBackIcon)`\r\n    margin-right: 10px;\r\n`;\r\n\r\nconst Toggle = styled.button`\r\n    margin-right: 30px;\r\n    background: none;\r\n    border: 0;\r\n    padding: 0;\r\n    color: inherit;\r\n    height: inherit;\r\n    font-size: inherit;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n    position: relative;\r\n    flex: 1 0 auto;\r\n    padding: 10px;\r\n`;\r\n\r\nconst DetailedImage = styled(Image)`\r\n    flex: none;\r\n    display: block;\r\n    margin: 0 auto;\r\n    filter: drop-shadow(0px 20px 20px rgba(0, 0, 0, 0.5));\r\n    opacity: ${({ fade }) => (fade ? 0.3 : 1)};\r\n    position: absolute;\r\n    width: calc(100% - 20px);\r\n    height: calc(100% - 80px);\r\n    object-fit: contain;\r\n    transition: opacity 300ms ease;\r\n`;\r\n\r\nconst Description = styled.div`\r\n    flex: 1 1 auto;\r\n    min-width: 1px;\r\n    padding: 10px 20px;\r\n    overflow: auto;\r\n    -webkit-overflow-scrolling: touch;\r\n\r\n    @media (min-width: 375px) {\r\n        padding: 10px 60px;\r\n    }\r\n`;\r\n\r\nconst ButtonBar = styled.div`\r\n    position: relative;\r\n    flex: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 60px;\r\n    margin: 20px 0;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    flex: 1 1 50%;\r\n    font-weight: bold;\r\n    border: 0;\r\n    max-width: 300px;\r\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nconst DeleteButton = styled(Button)`\r\n    color: #fff;\r\n    background: linear-gradient(0deg, rgba(162, 0, 0, 1) 0%, rgba(218, 0, 0, 1) 100%);\r\n`;\r\n\r\nconst EditorWrappper = styled.div`\r\n    margin: 0 auto;\r\n`;\r\n\r\nconst SaveButton = styled.button`\r\n    background: orange;\r\n    border: none;\r\n    width: 100%;\r\n    height: 40px;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport default function ImageDetails(props) {\r\n    const { history, image, removeImage, updateDescription } = props;\r\n    const { description } = image;\r\n    const { colors } = image.metadata.visionData;\r\n    const [primaryColor, secondaryColor] = colors\r\n        .sort((a, b) => b.score - a.score)\r\n        .reduce((acc, curr, index) => {\r\n            const {\r\n                color: { red, green, blue },\r\n            } = curr;\r\n            return index < 2 ? [...acc, `rgb(${red}, ${green}, ${blue})`] : acc;\r\n        }, []);\r\n\r\n    const [innerColor, outerColor] = [primaryColor, secondaryColor].sort((a, b) => getLuminance(b) - getLuminance(a));\r\n    const { user } = useContext(AppContext);\r\n    const gradient = tinygradient(colors.map(({ color: { red, green, blue } }) => `rgb(${red},${green},${blue})`));\r\n    const [fontColor] = ['#000', '#FFF'].sort((a, b) => getContrast(outerColor, b) - getContrast(outerColor, a));\r\n    const [editorState, setEditorState] = useState(\r\n        description ? EditorState.createWithContent(convertFromRaw(description)) : EditorState.createEmpty()\r\n    );\r\n    const [unsavedChanges, setUnsavedChanges] = useState(false);\r\n    const [isOverlayActive, setIsOverlayActive] = useState(false);\r\n\r\n    function saveDescription() {\r\n        const { id } = image;\r\n        const description = convertToRaw(editorState.getCurrentContent());\r\n        updateDescription({ id, description });\r\n        setUnsavedChanges(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUnsavedChanges(true);\r\n    }, [editorState]);\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta property=\"og:image\" content={Object.values(image.downloadUrls[0])[0]} />\r\n            </Helmet>\r\n            <GlobalStyles gradient={gradient.css('radial')} />\r\n            <Wrapper>\r\n                <ImageWrapper onClick={() => setIsOverlayActive(false)}>\r\n                    <DetailedImage image={{ ...image }} fade={isOverlayActive} />\r\n                </ImageWrapper>\r\n                <Overlay active={isOverlayActive}>\r\n                    <OverlayNav>\r\n                        <Back onClick={() => window.history.back()}>\r\n                            <BackArrow /> Tilbage\r\n                        </Back>\r\n                        <Toggle onClick={() => setIsOverlayActive(!isOverlayActive)}>\r\n                            {isOverlayActive ? 'Skjul' : 'Vis'} beskrivelse\r\n                        </Toggle>\r\n                    </OverlayNav>\r\n                    <Description>\r\n                        {user && (\r\n                            <EditorWrappper>\r\n                                <Editor\r\n                                    editorState={editorState}\r\n                                    onEditorStateChange={setEditorState}\r\n                                    toolbarClassName=\"editorToolbar\"\r\n                                    wrapperClassName=\"editorWrapper\"\r\n                                    editorClassName=\"editorTextField\"\r\n                                />\r\n                                {unsavedChanges && <SaveButton onClick={saveDescription}>Gem beskrivelse</SaveButton>}\r\n                            </EditorWrappper>\r\n                        )}\r\n                        {!user && description && (\r\n                            <div dangerouslySetInnerHTML={{ __html: stateToHTML(convertFromRaw(description)) }}></div>\r\n                        )}\r\n                        <ButtonBar>\r\n                            {user && <DeleteButton onClick={() => removeImage(image)}>Slet billede</DeleteButton>}\r\n                        </ButtonBar>\r\n                    </Description>\r\n                </Overlay>\r\n            </Wrapper>\r\n        </>\r\n    );\r\n}\r\n","/Users/afc/Frontend/Projects/nec/src/Image.js",["41"],"import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst Image = styled.img`\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    max-height: 100%;\n`;\n\nexport default (props) => {\n    const { image, className, sizes } = props;\n\n    const srcsetStrings = (image) =>\n        image.downloadUrls.map((obj) => {\n            const [key, url] = Object.entries(obj)[0];\n            const width = key.split('x')[0];\n            return `${url} ${width}w`;\n        });\n\n    return (\n        <Image\n            className={className}\n            key={image.id}\n            srcSet={srcsetStrings(image).join(', ')}\n            src={Object.values(image.downloadUrls[0])[0]}\n            sizes={sizes}\n            alt={image.metadata.name}\n            loading=\"lazy\"\n        />\n    );\n};\n","/Users/afc/Frontend/Projects/nec/src/breakpoints.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":186,"column":23,"nodeType":"48","messageId":"49","endLine":186,"endColumn":32},{"ruleId":"50","severity":1,"message":"51","line":244,"column":8,"nodeType":"52","endLine":244,"endColumn":10,"suggestions":"53"},{"ruleId":"46","severity":1,"message":"54","line":161,"column":13,"nodeType":"48","messageId":"49","endLine":161,"endColumn":20},{"ruleId":"46","severity":1,"message":"55","line":173,"column":12,"nodeType":"48","messageId":"49","endLine":173,"endColumn":22},{"ruleId":"46","severity":1,"message":"56","line":176,"column":12,"nodeType":"48","messageId":"49","endLine":176,"endColumn":21},{"ruleId":"57","severity":1,"message":"58","line":11,"column":1,"nodeType":"59","endLine":32,"endColumn":3},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'errorCode' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getImagesFromDb'. Either include it or remove the dependency array.","ArrayExpression",["62"],"'history' is assigned a value but never used.","'innerColor' is assigned a value but never used.","'fontColor' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [getImagesFromDb]",{"range":"65","text":"66"},[6841,6843],"[getImagesFromDb]"]