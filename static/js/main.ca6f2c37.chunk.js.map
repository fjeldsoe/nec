{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","galleryCollection","firestore","collection","storageRef","storage","ref","getDownloadURLs","snapshots","Promise","all","map","snapshot","resolve","getDownloadURL","then","downloadUrl","Object","objectSpread","addToDb","imagesData","forEach","imageData","id","_imageData$metadata","metadata","bucket","md5Hash","name","size","timeCreated","updated","console","log","doc","set","get","document","addEventListener","event","preventDefault","_event$dataTransfer$f","dataTransfer","files","images","image","uuid","imageRef","child","concat","put","upload","values","reduce","acc","file","type","includes","toConsumableArray","Wrapper","styled","div","_templateObject","App","react_default","a","createElement","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAgBAA,IAASC,cATM,CACXC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,iBAKvB,IACMC,EADKR,IAASS,YACSC,WAAW,WAElCC,EADUX,IAASY,UACEC,MAoB3B,SAASC,EAAgBC,GACrB,OAAOC,QAAQC,IACXF,EAAUG,IAAI,SAAAC,GACV,OAAO,IAAIH,QAAQ,SAAAI,GACfD,EAASN,IAAIQ,iBAAiBC,KAAK,SAAAC,GAC/BH,EAAQI,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAN,CAAgBI,wBAO3C,SAASG,EAAQC,GACbA,EAAWC,QAAQ,SAAAC,GAAa,IAExBC,EAGAD,EAHAC,GACAP,EAEAM,EAFAN,YAHwBQ,EAKxBF,EADAG,SAAYC,EAJYF,EAIZE,OAAQC,EAJIH,EAIJG,QAASC,EAJLJ,EAIKI,KAAMC,EAJXL,EAIWK,KAAMC,EAJjBN,EAIiBM,YAAaC,EAJ9BP,EAI8BO,QAG1DC,QAAQC,IAAIV,EAAIP,GAChBf,EAAkBiC,IAAIX,GAAIY,IAAI,CAC1BnB,cACAS,SAAU,CACNC,SACAC,UACAC,OACAC,OACAC,cACAC,eAOZ9B,EAAkBmC,MAAMrB,KAAK,SAAAH,GACzBoB,QAAQC,IAAIrB,KAsBpByB,SAASC,iBAAiB,OA3E1B,SAAuBC,GACnBA,EAAMC,iBADoB,IAAAC,EAKtBF,EADAG,aAAgBC,aAJM,IAAAF,EAIE,GAJFA,GA6D9B,SAAgBG,GACZ,OAAOnC,QAAQC,IACXkC,EAAOjC,IAAI,SAAAkC,GACP,OAAO,IAAIpC,QAAQ,SAAAI,GACf,IAAMU,EAAKuB,MACLC,EAAW3C,EAAW4C,MAAX,WAAAC,OAA4B1B,EAA5B,SACjBwB,EAASG,IAAIL,GAAO9B,KAAK,SAAAH,GACrBC,EAAQI,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAN,CAAgBW,gBAzDvC4B,CAJelC,OAAOmC,OAAOT,GAAOU,OAAO,SAACC,EAAKC,GAC7C,OAAOA,EAAKC,KAAKC,SAAS,SAAnB,GAAAR,OAAAhC,OAAAyC,EAAA,EAAAzC,CAAkCqC,GAAlC,CAAuCC,IAAQD,GACvD,KAGEvC,KAAKR,GACLQ,KAAKI,KA+DdkB,SAASC,iBAAiB,WAnB1B,SAA2BC,GACvBA,EAAMC,mBAoBV,IAAMmB,EAAUC,IAAOC,IAAVC,KAMEC,MAJf,WACI,OAAOC,EAAAC,EAAAC,cAACP,EAAD,CAASQ,UAAU,OAAnB,gBC9FSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAQV,EAAAC,EAAAC,cAAES,EAAF,MAAYtC,SAASuC,eAAe,SD4H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,KAAK,SAAAiE,GACjCA,EAAaC","file":"static/js/main.ca6f2c37.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport uuid from 'uuid/v4';\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { resolve } from 'path';\n\nconst config = {\n    apiKey: 'AIzaSyDHmbdXOUwR8oEHREt-Qc1Pwe6CQYrcQx0',\n    authDomain: 'necgallery-9b4b2.firebaseapp.com',\n    databaseURL: 'https://necgallery-9b4b2.firebaseio.com',\n    projectId: 'necgallery-9b4b2',\n    storageBucket: 'necgallery-9b4b2.appspot.com',\n    messagingSenderId: '534201773677'\n};\n\nfirebase.initializeApp(config);\n\nconst db = firebase.firestore();\nconst galleryCollection = db.collection('gallery');\nconst storage = firebase.storage();\nconst storageRef = storage.ref();\n\nreadDb();\n\nfunction onDropHandler(event) {\n    event.preventDefault();\n\n    const {\n        dataTransfer: { files = {} }\n    } = event;\n\n    const images = Object.values(files).reduce((acc, file) => {\n        return file.type.includes('image') ? [...acc, file] : acc;\n    }, []);\n\n    upload(images)\n        .then(getDownloadURLs)\n        .then(addToDb);\n}\n\nfunction getDownloadURLs(snapshots) {\n    return Promise.all(\n        snapshots.map(snapshot => {\n            return new Promise(resolve => {\n                snapshot.ref.getDownloadURL().then(downloadUrl => {\n                    resolve({ ...snapshot, downloadUrl });\n                });\n            });\n        })\n    );\n}\n\nfunction addToDb(imagesData) {\n    imagesData.forEach(imageData => {\n        const {\n            id,\n            downloadUrl,\n            metadata: { bucket, md5Hash, name, size, timeCreated, updated }\n        } = imageData;\n\n        console.log(id, downloadUrl);\n        galleryCollection.doc(id).set({\n            downloadUrl,\n            metadata: {\n                bucket,\n                md5Hash,\n                name,\n                size,\n                timeCreated,\n                updated\n            }\n        });\n    });\n}\n\nfunction readDb() {\n    galleryCollection.get().then(snapshot => {\n        console.log(snapshot);\n    });\n}\n\nfunction onDragoverHandler(event) {\n    event.preventDefault();\n}\n\nfunction upload(images) {\n    return Promise.all(\n        images.map(image => {\n            return new Promise(resolve => {\n                const id = uuid();\n                const imageRef = storageRef.child(`gallery/${id}.jpg`);\n                imageRef.put(image).then(snapshot => {\n                    resolve({ ...snapshot, id });\n                });\n            });\n        })\n    );\n}\n\ndocument.addEventListener('drop', onDropHandler);\ndocument.addEventListener('dragover', onDragoverHandler);\n\nconst Wrapper = styled.div``;\n\nfunction App() {\n    return <Wrapper className=\"App\"> React app </Wrapper>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}